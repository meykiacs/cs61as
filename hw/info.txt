grader:
racket -tm grader.rkt -- hw0-1-tests.rkt hw0-1.rkt sum-of-squares
racket -tm grader.rkt -- hw0-1-tests.rkt hw0-1.rkt

hw1: q5: create general case with a helper function and handling the special case seperately
hw2: q5-3 hof of an hof function
project1: q3 and q4: helper fiunctions to keep the input intact when recursion
project1: q6 create a general case with a helper function and handling the special case seperately
project1: q10 create a helper function and repeat the helper n times on the argument
hw4: q1 sicp 2.20: dotted tail notation
		 q1 sicp 2.22: when manipulating a list results in reverse order or lists of lists
hw5: q5 matrix and vector operations with conventional interfaces
hw6: q0, q2-q6 not done
hw7: q5: accumulate, flatmap, nth, delete!, shuffle
hw8: sicp 3.7: dispatching with local values
hw8: sicp 3.8: THE ONLY POINT IS THE ORDER OF EVALUATING ARGS MATTERS IF STATE CHANGES
hw8: sicp 3.10 3.11 environment diagrams not done
hw9: sicp 3.17, how come does the answer work for cyclic lists?
hw9: sicp 3.25 a complicated recursion exercise
hw9: q3 and q4 some nice box and pointer diagrams
